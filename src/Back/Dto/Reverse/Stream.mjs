/**
 * DTO for 'back-to-front' connection to send server events to a front.
 *
 * TODO: This is not pure DTO - it contains functions and functional Objects.
 */
// MODULE'S VARS
const NS = 'TeqFw_Web_Event_Back_Dto_Reverse_Stream';

// MODULE'S CLASSES
/**
 * @memberOf TeqFw_Web_Event_Back_Dto_Reverse_Stream
 */
class Dto {
    static namespace = NS;
    /**
     * Function with HTTPResponse object in own scope (closure) to close HTTP connection.
     * @type {function}
     */
    finalize;
    /**
     * Frontend application ID in backend.
     * @type {number}
     */
    frontBid;
    /**
     * Frontend application UUID (profile in browser).
     * @type {string}
     */
    frontUuid;
    /**
     * Incremental counter for event messages sent to the front.
     * @type {number}
     */
    messageId;
    /**
     * @type {TeqFw_Web_Event_Back_Mod_Crypto_Scrambler}
     */
    scrambler;
    /**
     * Frontend session UUID (tab in browser).
     * @type {string}
     */
    sessionUuid;
    /**
     * Connection state.
     * @type {string} see TeqFw_Web_Event_Back_Enum_Stream_State
     */
    state;
    /**
     * ID of the delayed function (setTimeout) to close unauthorized streams.
     * @type {Timeout}
     */
    unauthenticatedCloseId;
    /**
     * Stream UUID generated by backend. Used as frontend session UUID (tab in a browser).
     * @type {string}
     */
    uuid;
    /**
     * Function with HTTPResponse object in own scope (closure) to write out events messages.
     * @type {function}
     */
    write;
}

/**
 * @implements TeqFw_Core_Shared_Api_Factory_Dto
 */
export default class TeqFw_Web_Event_Back_Dto_Reverse_Stream {
    /**
     * @param {TeqFw_Core_Shared_Util_Cast.castInt|function} castInt
     * @param {TeqFw_Core_Shared_Util_Cast.castFunction|function} castFunction
     * @param {TeqFw_Core_Shared_Util_Cast.castString|function} castString
     * @param {typeof TeqFw_Web_Event_Back_Enum_Stream_State} STATE
     */

    constructor(
        {
            'TeqFw_Core_Shared_Util_Cast.castInt': castInt,
            'TeqFw_Core_Shared_Util_Cast.castFunction': castFunction,
            'TeqFw_Core_Shared_Util_Cast.castString': castString,
            TeqFw_Web_Event_Back_Enum_Stream_State$: STATE,
        }) {
        // INSTANCE METHODS
        /**
         * @param {TeqFw_Web_Event_Back_Dto_Reverse_Stream.Dto} [data]
         * @return {TeqFw_Web_Event_Back_Dto_Reverse_Stream.Dto}
         */
        this.createDto = function (data) {
            // create new DTO and populate it with initialization data
            const res = Object.assign(new Dto(), data);
            // cast known attributes
            res.finalize = castFunction(data?.finalize);
            res.frontBid = castInt(data?.frontBid);
            res.frontUuid = castString(data?.frontUuid);
            res.messageId = castInt(data?.messageId) || 1;
            res.scrambler = data?.scrambler; // this is not DTO
            res.sessionUuid = castString(data?.sessionUuid);
            res.state = castString(data?.state) ?? STATE.OPENED;
            res.unauthenticatedCloseId = undefined; // don't init this property
            res.uuid = castString(data?.uuid);
            res.write = castFunction(data?.write);
            return res;
        }
    }

}
